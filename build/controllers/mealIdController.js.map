{"version":3,"sources":["../../src/controllers/mealIdController.js"],"names":["ingredientCount","mealObject","Promise","all","map","item","i","ingredient","idMeal","getMealsById","mealIdArray","id","url","then","data","json","meals","arrayMeals","reject","catch","array","invalidIds","forEach","meal","push","length","error","computeLeast","numberList","sort","a","b","mealIdEndpoint","req","res","mealIdList","body","mealsList","status","ingredientsNoArray","leastIngredientNo","filter","results","arrayOfIds","result","Number","send"],"mappings":"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","sourcesContent":["import fetch from 'node-fetch';\r\n\r\n// returns no. of ingredients for each meal ID\r\nfunction ingredientCount(mealObject) {\r\n  return Promise.all(mealObject.map((item) => {\r\n    let i = 1;\r\n    while (i > 0) {\r\n      const ingredient = item[`strIngredient${i}`];\r\n      if (ingredient === '' || ingredient === null) {\r\n        i -= 1;\r\n        break;\r\n      } else if (!item.idMeal) {\r\n        return item;\r\n      } else {\r\n        i += 1;\r\n      }\r\n    }\r\n    return [item.idMeal, i];\r\n  }));\r\n}\r\n\r\n// fetch meal data for each meal ID from themealdb.com API\r\nfunction getMealsById(mealIdArray) {\r\n  return Promise.all(mealIdArray.map((id) => {\r\n    const url = `https://www.themealdb.com/api/json/v1/1/lookup.php?i=${id}`;\r\n    return fetch(url)\r\n      .then(data => data.json())\r\n      .then((json) => {\r\n        const { meals } = json;\r\n        const [arrayMeals] = meals;\r\n        if (meals === null) {\r\n          Promise.reject(id);\r\n        } else {\r\n          return arrayMeals;\r\n        }\r\n      })\r\n      .catch(() => id);\r\n  }))\r\n    .then((array) => {\r\n      const invalidIds = [];\r\n      array.forEach((meal) => {\r\n        if (!meal.idMeal) invalidIds.push(meal);\r\n      });\r\n      return (invalidIds.length > 0) ? { error: true, invalidIds } : array;\r\n    });\r\n}\r\n\r\n// sorts a list numerically returning the least number\r\nfunction computeLeast(data) {\r\n  const numberList = data.map(item => item[1]);\r\n  numberList.sort((a, b) => { return a - b; });\r\n  return numberList[0];\r\n}\r\n\r\nfunction mealIdEndpoint(req, res) {\r\n  const mealIdList = req.body;\r\n\r\n  getMealsById(mealIdList)\r\n    .then((mealsList) => {\r\n      if (!mealsList.length) {\r\n        const { invalidIds } = mealsList;\r\n        res.status(422).json({ error: `the following ids ( ${invalidIds} ) do not match any meals`});\r\n      } else {\r\n        ingredientCount(mealsList)\r\n          .then((ingredientsNoArray) => {\r\n            const leastIngredientNo = computeLeast(ingredientsNoArray);\r\n            return ingredientsNoArray.filter(array => array[1] === leastIngredientNo);\r\n          })\r\n          .then((results) => {\r\n            const arrayOfIds = [];\r\n            results.forEach(result => arrayOfIds.push(Number(result[0])));\r\n            return arrayOfIds;\r\n          })\r\n          .then((data) => {\r\n            res.status(200).json(data);\r\n          });\r\n      }\r\n    })\r\n    .catch(() => {\r\n      res.status(500).send('internal server error');\r\n    });\r\n}\r\n\r\nexport default mealIdEndpoint;\r\n"],"file":"mealIdController.js"}